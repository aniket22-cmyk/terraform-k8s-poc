name: Deploy to EC2 Kubernetes

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env:
          TF_VAR_key_name: ${{ secrets.EC2_KEY_NAME }}

      - name: Get EC2 Public IP
        id: get-ip
        run: |
          cd terraform
          IP=$(terraform output -raw ec2_public_ip)
          if [ -z "$IP" ]; then
            echo "‚ùå FATAL: ec2_public_ip is empty!"
            exit 1
          fi
          echo "‚úÖ EC2 IP: $IP"
          echo "ip=$IP" >> $GITHUB_OUTPUT

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          printf '%s' "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ steps.get-ip.outputs.ip }} >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy App to EC2 (with retry)
        run: |
          set +e
          HOST="${{ steps.get-ip.outputs.ip }}"
          for i in {1..12}; do
            echo "üîÑ Attempt $i to copy app.py to ubuntu@$HOST..."
            scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o BatchMode=yes app.py ubuntu@$HOST:/home/ubuntu/app/app.py
            if [ $? -eq 0 ]; then
              echo "‚úÖ Copy succeeded!"
              exit 0
            fi
            echo "‚ö†Ô∏è Attempt $i failed. Waiting 30s before retry..."
            sleep 30
          done
          echo "‚ùå Failed to copy app.py after 12 attempts (6 minutes)"
          exit 1

      - name: Deploy to Kubernetes
        run: |
          HOST="${{ steps.get-ip.outputs.ip }}"
          echo "‚è≥ Waiting for Minikube to be ready (kubeconfig to appear)..."

          # Wait for kubeconfig to exist (up to 5 minutes)
          for i in {1..25}; do
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 ubuntu@$HOST "test -f /home/ubuntu/.kube/config"; then
              echo "‚úÖ kubeconfig found!"
              break
            fi
            echo "‚è≥ kubeconfig not ready yet (attempt $i/25)..."
            sleep 12
          done

          # Final check
          if ! ssh -o StrictHostKeyChecking=no ubuntu@$HOST "test -f /home/ubuntu/.kube/config"; then
            echo "‚ùå kubeconfig never appeared after 5 minutes!"
            exit 1
          fi

          # Fetch kubeconfig
          echo "üì• Fetching kubeconfig from ubuntu@$HOST"
          scp -o StrictHostKeyChecking=no ubuntu@$HOST:/home/ubuntu/.kube/config ~/.kube/config

          # Deploy app
          kubectl apply -f k8s/deployment.yaml