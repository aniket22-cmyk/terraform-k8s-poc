# name: Deploy to EC2 Kubernetes

# on:
#   push:
#     branches: [ main ]

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3

#       - name: Terraform Init
#         run: terraform init
#         working-directory: ./terraform

#       - name: Terraform Apply
#         run: terraform apply -auto-approve
#         working-directory: ./terraform
#         env:
#           TF_VAR_key_name: ${{ secrets.EC2_KEY_NAME }}

#       - name: Get EC2 Public IP
#         id: get-ip
#         run: |
#           cd terraform
#           IP=$(terraform output -raw ec2_public_ip)
#           if [ -z "$IP" ]; then
#             echo "‚ùå FATAL: ec2_public_ip is empty!"
#             exit 1
#           fi
#           echo "‚úÖ EC2 IP: $IP"
#           echo "ip=$IP" >> $GITHUB_OUTPUT

#       - name: Debug Secrets & Environment
#         run: |
#           echo "üîç Debug: Checking secrets and env"
#           echo "EC2_KEY_NAME = '${{ secrets.EC2_KEY_NAME }}'"
#           echo "SSH key length = ${#SSH_PRIVATE_KEY}"
#           echo "IP from previous step = '${{ steps.get-ip.outputs.ip }}'"
#         env:
#           SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

#       - name: Setup SSH Key
#         run: |
#           echo "üîß Setting up SSH..."
#           mkdir -p ~/.ssh
#           echo "‚úÖ mkdir succeeded"

#           if [ -z "$SSH_PRIVATE_KEY" ]; then
#             echo "‚ùå SSH_PRIVATE_KEY is EMPTY!"
#             exit 1
#           fi

#           printf '%s' "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa
#           echo "‚úÖ Key written. File size: $(wc -c < ~/.ssh/id_rsa) bytes"

#           if ! head -n1 ~/.ssh/id_rsa | grep -q "PRIVATE KEY"; then
#             echo "‚ùå Key does NOT look like a valid private key!"
#             exit 1
#           fi

#           sleep 10
#           HOST="${{ steps.get-ip.outputs.ip }}"
#           if [ -z "$HOST" ]; then
#             echo "‚ùå HOST is empty!"
#             exit 1
#           fi
#           echo "üì° Running ssh-keyscan for $HOST"
#           ssh-keyscan "$HOST" >> ~/.ssh/known_hosts
#           echo "‚úÖ SSH setup complete"
#         env:
#           SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

#       - name: Wait for EC2 and Create App Directory
#         run: |
#           HOST="${{ steps.get-ip.outputs.ip }}"
#           echo "‚è≥ Waiting for SSH access and creating app directory..."
          
#           for i in {1..30}; do
#             if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@$HOST "mkdir -p /home/ubuntu/app && echo 'Ready'" 2>/dev/null; then
#               echo "‚úÖ SSH accessible and app directory created!"
#               exit 0
#             fi
#             echo "‚è≥ Waiting for SSH... (attempt $i/30)"
#             sleep 10
#           done
          
#           echo "‚ùå Failed to establish SSH connection"
#           exit 1

#       - name: Copy App to EC2
#         run: |
#           HOST="${{ steps.get-ip.outputs.ip }}"
          
#           for i in {1..5}; do
#             echo "üîÑ Attempt $i to copy app.py to ubuntu@$HOST..."
#             scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 app.py ubuntu@$HOST:/home/ubuntu/app/app.py
#             if [ $? -eq 0 ]; then
#               echo "‚úÖ Copy succeeded!"
#               exit 0
#             fi
#             echo "‚ö†Ô∏è Attempt $i failed. Waiting 10s before retry..."
#             sleep 10
#           done
#           echo "‚ùå Failed to copy app.py after 5 attempts"
#           exit 1

#       - name: Deploy to Kubernetes
#         run: |
#           HOST="${{ steps.get-ip.outputs.ip }}"
#           echo "‚è≥ Waiting for Minikube to be ready..."
          
#           for i in {1..60}; do
#             if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 ubuntu@$HOST "test -f /home/ubuntu/.minikube-ready && test -f /home/ubuntu/.kube/config"; then
#               echo "‚úÖ Minikube is ready!"
#               break
#             fi
            
#             if [ $((i % 10)) -eq 0 ]; then
#               echo "üìã Checking setup progress..."
#               ssh -o StrictHostKeyChecking=no ubuntu@$HOST "tail -30 /var/log/user-data.log" || echo "Logs not available yet"
#             fi

#             echo "‚è≥ Waiting... (attempt $i/60)"
#             sleep 10
#           done

#           if ! ssh -o StrictHostKeyChecking=no ubuntu@$HOST "test -f /home/ubuntu/.kube/config"; then
#             echo "‚ùå Minikube setup failed! Full logs:"
#             ssh -o StrictHostKeyChecking=no ubuntu@$HOST "cat /var/log/user-data.log" || echo "Cannot retrieve logs"
#             exit 1
#           fi
          
#           echo "üì• Copying kubeconfig..."
#           mkdir -p ~/.kube
#           scp -o StrictHostKeyChecking=no ubuntu@$HOST:/home/ubuntu/.kube/config ~/.kube/config
          
#           echo "üîß Updating kubeconfig server IP..."
#           sed -i "s|https://.*:8443|https://$HOST:8443|g" ~/.kube/config
          
#           echo "üöÄ Deploying to Kubernetes..."
#           kubectl apply -f k8s/deployment.yaml
          
#           echo "‚úÖ Deployment complete!"
#           echo "üìä Pod status:"
#           kubectl get pods
#           echo "üìä Service status:"
#           kubectl get svc



name: Deploy to EC2 Kubernetes

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env:
          TF_VAR_key_name: ${{ secrets.EC2_KEY_NAME }}

      - name: Get EC2 Public IP
        id: get-ip
        run: |
          cd terraform
          IP=$(terraform output -raw ec2_public_ip)
          if [ -z "$IP" ]; then
            echo "‚ùå FATAL: ec2_public_ip is empty!"
            exit 1
          fi
          echo "‚úÖ EC2 IP: $IP"
          echo "ip=$IP" >> $GITHUB_OUTPUT

      - name: Debug Secrets & Environment
        run: |
          echo "üîç Debug: Checking secrets and env"
          echo "EC2_KEY_NAME = '${{ secrets.EC2_KEY_NAME }}'"
          echo "SSH key length = ${#SSH_PRIVATE_KEY}"
          echo "IP from previous step = '${{ steps.get-ip.outputs.ip }}'"
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup SSH Key
        run: |
          echo "üîß Setting up SSH..."
          mkdir -p ~/.ssh
          echo "‚úÖ mkdir succeeded"

          if [ -z "$SSH_PRIVATE_KEY" ]; then
            echo "‚ùå SSH_PRIVATE_KEY is EMPTY!"
            exit 1
          fi

          printf '%s' "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "‚úÖ Key written. File size: $(wc -c < ~/.ssh/id_rsa) bytes"

          if ! head -n1 ~/.ssh/id_rsa | grep -q "PRIVATE KEY"; then
            echo "‚ùå Key does NOT look like a valid private key!"
            exit 1
          fi

          sleep 10
          HOST="${{ steps.get-ip.outputs.ip }}"
          if [ -z "$HOST" ]; then
            echo "‚ùå HOST is empty!"
            exit 1
          fi
          echo "üì° Running ssh-keyscan for $HOST"
          ssh-keyscan "$HOST" >> ~/.ssh/known_hosts
          echo "‚úÖ SSH setup complete"
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Wait for EC2 and Create App Directory
        run: |
          HOST="${{ steps.get-ip.outputs.ip }}"
          echo "‚è≥ Waiting for SSH access and creating app directory..."
          
          for i in {1..30}; do
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@$HOST "mkdir -p /home/ubuntu/app && echo 'Ready'" 2>/dev/null; then
              echo "‚úÖ SSH accessible and app directory created!"
              exit 0
            fi
            echo "‚è≥ Waiting for SSH... (attempt $i/30)"
            sleep 10
          done
          
          echo "‚ùå Failed to establish SSH connection"
          exit 1

      - name: Copy App to EC2
        run: |
          HOST="${{ steps.get-ip.outputs.ip }}"
          
          for i in {1..5}; do
            echo "üîÑ Attempt $i to copy app.py to ubuntu@$HOST..."
            scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 app.py ubuntu@$HOST:/home/ubuntu/app/app.py
            if [ $? -eq 0 ]; then
              echo "‚úÖ Copy succeeded!"
              exit 0
            fi
            echo "‚ö†Ô∏è Attempt $i failed. Waiting 10s before retry..."
            sleep 10
          done
          echo "‚ùå Failed to copy app.py after 5 attempts"
          exit 1

      - name: Deploy to Kubernetes
        run: |
          HOST="${{ steps.get-ip.outputs.ip }}"
          echo "‚è≥ Waiting for Minikube to be ready..."
          
          for i in {1..60}; do
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 ubuntu@$HOST "test -f /home/ubuntu/.minikube-ready && test -f /home/ubuntu/.kube/config"; then
              echo "‚úÖ Minikube is ready!"
              break
            fi
            
            if [ $((i % 10)) -eq 0 ]; then
              echo "üìã Checking setup progress..."
              ssh -o StrictHostKeyChecking=no ubuntu@$HOST "tail -30 /var/log/user-data.log" || echo "Logs not available yet"
            fi

            echo "‚è≥ Waiting... (attempt $i/60)"
            sleep 10
          done

          if ! ssh -o StrictHostKeyChecking=no ubuntu@$HOST "test -f /home/ubuntu/.kube/config"; then
            echo "‚ùå Minikube setup failed! Full logs:"
            ssh -o StrictHostKeyChecking=no ubuntu@$HOST "cat /var/log/user-data.log" || echo "Cannot retrieve logs"
            exit 1
          fi
          
          echo "üì• Copying kubeconfig and certificates..."
          mkdir -p ~/.kube
          mkdir -p ~/.minikube/profiles/minikube
          
          # Copy kubeconfig
          scp -o StrictHostKeyChecking=no ubuntu@$HOST:/home/ubuntu/.kube/config ~/.kube/config
          
          # Copy certificate files
          scp -o StrictHostKeyChecking=no ubuntu@$HOST:/home/ubuntu/.minikube/ca.crt ~/.minikube/ca.crt
          scp -o StrictHostKeyChecking=no ubuntu@$HOST:/home/ubuntu/.minikube/profiles/minikube/client.crt ~/.minikube/profiles/minikube/client.crt
          scp -o StrictHostKeyChecking=no ubuntu@$HOST:/home/ubuntu/.minikube/profiles/minikube/client.key ~/.minikube/profiles/minikube/client.key
          
          echo "üîß Updating kubeconfig server IP..."
          sed -i "s|https://.*:8443|https://$HOST:8443|g" ~/.kube/config
          
          echo "üöÄ Deploying to Kubernetes..."
          kubectl apply -f k8s/deployment.yaml
          
          echo "‚úÖ Deployment complete!"
          echo "üìä Pod status:"
          kubectl get pods
          echo "üìä Service status:"
          kubectl get svc